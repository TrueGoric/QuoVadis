/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.19.1
// source: Proto/rent_service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var Proto_common_pb = require('../Proto/common_pb.js')
const proto = require('./rent_service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.RentClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.RentPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetAreasRequest,
 *   !proto.GetAreasResponse>}
 */
const methodDescriptor_Rent_GetAreas = new grpc.web.MethodDescriptor(
  '/Rent/GetAreas',
  grpc.web.MethodType.UNARY,
  proto.GetAreasRequest,
  proto.GetAreasResponse,
  /**
   * @param {!proto.GetAreasRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetAreasResponse.deserializeBinary
);


/**
 * @param {!proto.GetAreasRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetAreasResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetAreasResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RentClient.prototype.getAreas =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Rent/GetAreas',
      request,
      metadata || {},
      methodDescriptor_Rent_GetAreas,
      callback);
};


/**
 * @param {!proto.GetAreasRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetAreasResponse>}
 *     Promise that resolves to the response
 */
proto.RentPromiseClient.prototype.getAreas =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Rent/GetAreas',
      request,
      metadata || {},
      methodDescriptor_Rent_GetAreas);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetVehiclesRequest,
 *   !proto.GetVehiclesResponse>}
 */
const methodDescriptor_Rent_GetVehicles = new grpc.web.MethodDescriptor(
  '/Rent/GetVehicles',
  grpc.web.MethodType.UNARY,
  proto.GetVehiclesRequest,
  proto.GetVehiclesResponse,
  /**
   * @param {!proto.GetVehiclesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetVehiclesResponse.deserializeBinary
);


/**
 * @param {!proto.GetVehiclesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetVehiclesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetVehiclesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RentClient.prototype.getVehicles =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Rent/GetVehicles',
      request,
      metadata || {},
      methodDescriptor_Rent_GetVehicles,
      callback);
};


/**
 * @param {!proto.GetVehiclesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetVehiclesResponse>}
 *     Promise that resolves to the response
 */
proto.RentPromiseClient.prototype.getVehicles =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Rent/GetVehicles',
      request,
      metadata || {},
      methodDescriptor_Rent_GetVehicles);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetCurrentlyRentedVehicleRequest,
 *   !proto.GetCurrentlyRentedVehicleResponse>}
 */
const methodDescriptor_Rent_GetCurrentlyRentedVehicle = new grpc.web.MethodDescriptor(
  '/Rent/GetCurrentlyRentedVehicle',
  grpc.web.MethodType.UNARY,
  proto.GetCurrentlyRentedVehicleRequest,
  proto.GetCurrentlyRentedVehicleResponse,
  /**
   * @param {!proto.GetCurrentlyRentedVehicleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetCurrentlyRentedVehicleResponse.deserializeBinary
);


/**
 * @param {!proto.GetCurrentlyRentedVehicleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetCurrentlyRentedVehicleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetCurrentlyRentedVehicleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RentClient.prototype.getCurrentlyRentedVehicle =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Rent/GetCurrentlyRentedVehicle',
      request,
      metadata || {},
      methodDescriptor_Rent_GetCurrentlyRentedVehicle,
      callback);
};


/**
 * @param {!proto.GetCurrentlyRentedVehicleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetCurrentlyRentedVehicleResponse>}
 *     Promise that resolves to the response
 */
proto.RentPromiseClient.prototype.getCurrentlyRentedVehicle =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Rent/GetCurrentlyRentedVehicle',
      request,
      metadata || {},
      methodDescriptor_Rent_GetCurrentlyRentedVehicle);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.BeginRentRequest,
 *   !proto.BeginRentResponse>}
 */
const methodDescriptor_Rent_BeginRent = new grpc.web.MethodDescriptor(
  '/Rent/BeginRent',
  grpc.web.MethodType.UNARY,
  proto.BeginRentRequest,
  proto.BeginRentResponse,
  /**
   * @param {!proto.BeginRentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.BeginRentResponse.deserializeBinary
);


/**
 * @param {!proto.BeginRentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.BeginRentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.BeginRentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RentClient.prototype.beginRent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Rent/BeginRent',
      request,
      metadata || {},
      methodDescriptor_Rent_BeginRent,
      callback);
};


/**
 * @param {!proto.BeginRentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.BeginRentResponse>}
 *     Promise that resolves to the response
 */
proto.RentPromiseClient.prototype.beginRent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Rent/BeginRent',
      request,
      metadata || {},
      methodDescriptor_Rent_BeginRent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EndRentRequest,
 *   !proto.EndRentResponse>}
 */
const methodDescriptor_Rent_EndRent = new grpc.web.MethodDescriptor(
  '/Rent/EndRent',
  grpc.web.MethodType.UNARY,
  proto.EndRentRequest,
  proto.EndRentResponse,
  /**
   * @param {!proto.EndRentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.EndRentResponse.deserializeBinary
);


/**
 * @param {!proto.EndRentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.EndRentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.EndRentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RentClient.prototype.endRent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Rent/EndRent',
      request,
      metadata || {},
      methodDescriptor_Rent_EndRent,
      callback);
};


/**
 * @param {!proto.EndRentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.EndRentResponse>}
 *     Promise that resolves to the response
 */
proto.RentPromiseClient.prototype.endRent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Rent/EndRent',
      request,
      metadata || {},
      methodDescriptor_Rent_EndRent);
};


module.exports = proto;

